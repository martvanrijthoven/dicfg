{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Validators**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pprint import pprint\n",
    "\n",
    "from dicfg import ConfigReader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "default:\n",
      "    config_int@validate(positive-number): 1\n",
      "    config_string: \"fire\"\n",
      "    config_list: [1, 2, 3]\n",
      "    config_none: None\n",
      "    config_dict:\n",
      "        sub_config: \"water\"{'default': {'config_int': 1,\n",
      "             'config_string': 'fire',\n",
      "             'config_list': [1, 2, 3],\n",
      "             'config_none': 'None',\n",
      "             'config_dict': {'sub_config': 'water'}}}\n"
     ]
    }
   ],
   "source": [
    "!cat ./configs/config_with_validators.yml\n",
    "config_reader = ConfigReader(name=\"myconfig\", main_config_path=\"./configs/config_with_validators.yml\")\n",
    "pprint(config_reader.read(), sort_dicts=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValidationErrors",
     "evalue": "\ndefault:config_int:Value must be a positive number.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValidationErrors\u001b[0m                          Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[10], line 8\u001b[0m\n\u001b[1;32m      1\u001b[0m user_config \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m      2\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmyconfig\u001b[39m\u001b[38;5;124m\"\u001b[39m: {\n\u001b[1;32m      3\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdefault\u001b[39m\u001b[38;5;124m\"\u001b[39m: {\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m      6\u001b[0m     }\n\u001b[1;32m      7\u001b[0m }\n\u001b[0;32m----> 8\u001b[0m pprint(\u001b[43mconfig_reader\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43muser_config\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muser_config\u001b[49m\u001b[43m)\u001b[49m, sort_dicts\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "File \u001b[0;32m~/code/dicfg/dicfg/reader.py:128\u001b[0m, in \u001b[0;36mConfigReader.read\u001b[0;34m(self, user_config, presets)\u001b[0m\n\u001b[1;32m    125\u001b[0m merged_configs \u001b[38;5;241m=\u001b[39m merge(\u001b[38;5;241m*\u001b[39mconfigs)\n\u001b[1;32m    127\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m:=\u001b[39m \u001b[38;5;28mlist\u001b[39m(merged_configs\u001b[38;5;241m.\u001b[39mvalidate()):\n\u001b[0;32m--> 128\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m ValidationErrors(errors)\n\u001b[1;32m    130\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m merged_configs\u001b[38;5;241m.\u001b[39mcast()\n",
      "\u001b[0;31mValidationErrors\u001b[0m: \ndefault:config_int:Value must be a positive number."
     ]
    }
   ],
   "source": [
    "user_config = {\n",
    "    \"myconfig\": {\n",
    "        \"default\": {\n",
    "            \"config_int\": -1,\n",
    "        }\n",
    "    }\n",
    "}\n",
    "pprint(config_reader.read(user_config=user_config), sort_dicts=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dicfg",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
